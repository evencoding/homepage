{"version":3,"sources":["components/GoogleForm.tsx","atoms.tsx","components/DraggableCard.tsx","components/Board.tsx","components/AddDelete.tsx","components/ShortCut.tsx","App.tsx","GlobalStyle.tsx","index.tsx"],"names":["GoogleSearch","styled","div","SInput","input","GoogleForm","useForm","register","handleSubmit","setValue","onSubmit","searchValue","url","window","open","required","placeholder","autoFocus","autoComplete","localData","localStorage","getItem","shortCutState","atom","key","default","JSON","parse","Card","props","isDragging","DraggableCard","shortCut","index","draggableId","name","magic","info","ref","innerRef","draggableProps","href","link","dragHandleProps","React","memo","Wrapper","SBoard","Board","boardId","content","droppableId","droppableProps","map","Sbutton","button","AddForm","CutName","CutLink","Input","Garbage","isDraggingOver","Icon","span","Error","AddDelete","useState","displayForm","setDisplayForm","error","setError","useRecoilState","shortCuts","setShortCuts","onClick","current","keys","Object","i","length","j","copyShortCut","splice","setItem","stringify","htmlFor","id","maxLength","Boards","AddAndDelete","ShortCut","setShortCut","onDragEnd","destination","source","copyDestination","copySource","App","GlobalStyle","createGlobalStyle","reset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d30d8e0.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GoogleSearch = styled.div`\r\n  text-align: center;\r\n  padding-top: 100px;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst SInput = styled.input`\r\n  width: 60%;\r\n  max-width: 520px;\r\n  min-width: 350px;\r\n  height: 35px;\r\n  border-radius: 20px;\r\n  border: 2px soild whitesmoke;\r\n  background-color: #202124;\r\n  font-size: 16px;\r\n  padding-left: 15px;\r\n  color: white;\r\n  outline: 2px solid #454a52;\r\n  ::placeholder {\r\n    opacity: 0.6;\r\n    color: white;\r\n    margin-left: 15px;\r\n    font-size: 16px;\r\n  }\r\n  &:focus {\r\n    border: none;\r\n    background-color: #303134;\r\n  }\r\n`;\r\n\r\nfunction GoogleForm() {\r\n  const { register, handleSubmit, setValue } = useForm();\r\n  const onSubmit = ({ searchValue }: any) => {\r\n    const url = `https://www.google.com/search?q=${searchValue}`;\r\n    setValue(\"searchValue\", \"\");\r\n    window.open(url, \"_self\");\r\n  };\r\n  return (\r\n    <GoogleSearch>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SInput\r\n          {...register(\"searchValue\", { required: true })}\r\n          placeholder=\"Google Search\"\r\n          autoFocus={true}\r\n          autoComplete=\"off\"\r\n        />\r\n      </form>\r\n    </GoogleSearch>\r\n  );\r\n}\r\n\r\nexport default GoogleForm;\r\n","import { atom } from \"recoil\";\r\n\r\nexport interface ISourtCutState {\r\n  [key: string]: {\r\n    name: string;\r\n    link: string;\r\n  }[];\r\n}\r\n\r\nconst localData = localStorage.getItem(\"shortCuts\");\r\n\r\nexport const shortCutState = atom<ISourtCutState>({\r\n  key: \"shortCut\",\r\n  default: localData\r\n    ? JSON.parse(localData)\r\n    : {\r\n        \"Board 1\": [],\r\n        \"Board 2\": [],\r\n        \"Board 3\": [],\r\n        \"Board 4\": [],\r\n      },\r\n});\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ICard {\r\n  isDragging: boolean;\r\n}\r\n\r\nconst Card = styled.div<ICard>`\r\n  display: flex;\r\n  padding: 0 10px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n  a {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: ${(props) => (props.isDragging ? \"#192a56\" : \"#202124\")};\r\n    border-radius: 10px;\r\n    width: 100%;\r\n    height: 40px;\r\n    div {\r\n      position: absolute;\r\n      right: 0px;\r\n      display: flex;\r\n      height: 40px;\r\n      width: 30px;\r\n      justify-content: center;\r\n      align-items: center;\r\n      span {\r\n        color: #40739e;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IDraggableCardProps {\r\n  shortCut: {\r\n    name: string;\r\n    link: string;\r\n  };\r\n  index: number;\r\n}\r\n\r\nfunction DraggableCard({ shortCut, index }: IDraggableCardProps) {\r\n  return (\r\n    <Draggable key={shortCut.name} draggableId={shortCut.name} index={index}>\r\n      {(magic, info) => (\r\n        <Card\r\n          isDragging={info.isDragging}\r\n          ref={magic.innerRef}\r\n          {...magic.draggableProps}\r\n        >\r\n          <a href={shortCut.link}>\r\n            {shortCut.name}\r\n            <div {...magic.dragHandleProps}>\r\n              <span>⇅</span>\r\n            </div>\r\n          </a>\r\n        </Card>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default React.memo(DraggableCard);\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport DraggableCard from \"./DraggableCard\";\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #303134;\r\n  padding: 10px 0px;\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n`;\r\n\r\nconst SBoard = styled.div`\r\n  min-height: 300px;\r\n  flex-grow: 1;\r\n`;\r\n\r\ninterface IBoardProps {\r\n  boardId: string;\r\n  content: {\r\n    name: string;\r\n    link: string;\r\n  }[];\r\n}\r\n\r\nfunction Board({ boardId, content }: IBoardProps) {\r\n  return (\r\n    <Wrapper>\r\n      <Droppable droppableId={boardId}>\r\n        {(magic) => (\r\n          <SBoard ref={magic.innerRef} {...magic.droppableProps}>\r\n            {content.map((shortCut, index) => (\r\n              <DraggableCard\r\n                key={shortCut.name}\r\n                index={index}\r\n                shortCut={shortCut}\r\n              />\r\n            ))}\r\n            {magic.placeholder}\r\n          </SBoard>\r\n        )}\r\n      </Droppable>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import { useState } from \"react\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { ISourtCutState, shortCutState } from \"../atoms\";\r\n\r\ninterface IGarbage {\r\n  isDraggingOver: boolean;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: absolute;\r\n  bottom: 25px;\r\n`;\r\n\r\nconst Sbutton = styled.button`\r\n  margin-right: 25px;\r\n  border-radius: 10px;\r\n  height: 30px;\r\n  border: none;\r\n  background-color: #303134;\r\n  color: white;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst AddForm = styled.div`\r\n  margin-right: 25px;\r\n  padding: 10px;\r\n  width: 350px;\r\n  border-radius: 10px;\r\n  background-color: #303134;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  select {\r\n    width: 80px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nconst CutName = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 8px;\r\n  input {\r\n    padding: 3px;\r\n  }\r\n  label {\r\n    margin-right: 15px;\r\n  }\r\n`;\r\n\r\nconst CutLink = styled.div`\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n  align-items: center;\r\n  input {\r\n    padding: 3px;\r\n  }\r\n  label {\r\n    margin-right: 15px;\r\n  }\r\n`;\r\n\r\nconst Input = styled.div``;\r\n\r\nconst Garbage = styled.div<IGarbage>`\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver ? \"#c23616\" : \"#303134\"};\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  font-size: 50px;\r\n`;\r\n\r\nconst Error = styled.span`\r\n  color: red;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\ninterface ISubmitProps {\r\n  name: string;\r\n  link: string;\r\n}\r\n\r\nfunction AddDelete() {\r\n  const [displayForm, setDisplayForm] = useState(false);\r\n  const { register, handleSubmit, setValue } = useForm();\r\n  const [error, setError] = useState(\"\");\r\n  const [shortCuts, setShortCuts] =\r\n    useRecoilState<ISourtCutState>(shortCutState);\r\n  const onClickDisplayBtn = () => {\r\n    setDisplayForm((current) => !current);\r\n  };\r\n  const onSubmit = ({ name, link }: ISubmitProps) => {\r\n    const keys = Object.keys(shortCuts);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      for (let j = 0; j < shortCuts[keys[i]].length; j++) {\r\n        if (shortCuts[keys[i]][j].name === name) {\r\n          setError(\"같은 이름의 바로가기가 이미 존재합니다\");\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    const key = \"Board 1\";\r\n    let copyShortCut = [...shortCuts[key]];\r\n    const length = copyShortCut.length;\r\n    copyShortCut.splice(length, 0, { name, link });\r\n    setShortCuts({\r\n      ...shortCuts,\r\n      [key]: copyShortCut,\r\n    });\r\n    localStorage.setItem(\r\n      \"shortCuts\",\r\n      JSON.stringify({\r\n        ...shortCuts,\r\n        [key]: copyShortCut,\r\n      })\r\n    );\r\n    setError(\"\");\r\n    setValue(\"name\", \"\");\r\n    setValue(\"link\", \"\");\r\n    setDisplayForm(false);\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Sbutton onClick={onClickDisplayBtn}>바로가기 추가</Sbutton>\r\n      {displayForm ? (\r\n        <AddForm>\r\n          <Error>{error}</Error>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Input>\r\n              <CutName>\r\n                <label htmlFor={\"name\"}>바로가기 이름</label>\r\n                <input\r\n                  id={\"name\"}\r\n                  {...register(\"name\")}\r\n                  maxLength={30}\r\n                  required\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CutName>\r\n              <CutLink>\r\n                <label htmlFor={\"link\"}>바로가기 주소</label>\r\n                <input\r\n                  id={\"link\"}\r\n                  {...register(\"link\")}\r\n                  required\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CutLink>\r\n            </Input>\r\n            <button>추가</button>\r\n          </form>\r\n        </AddForm>\r\n      ) : null}\r\n      <Droppable droppableId=\"delete\">\r\n        {(magic, info) => (\r\n          <Garbage\r\n            isDraggingOver={info.isDraggingOver}\r\n            ref={magic.innerRef}\r\n            {...magic.droppableProps}\r\n          >\r\n            <Icon>🗑</Icon>\r\n          </Garbage>\r\n        )}\r\n      </Droppable>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default AddDelete;\r\n","import styled from \"styled-components\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { shortCutState } from \"../atoms\";\r\nimport Board from \"./Board\";\r\nimport AddDelete from \"./AddDelete\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Boards = styled.div`\r\n  display: grid;\r\n  width: 80%;\r\n  min-width: 660px;\r\n  gap: 15px;\r\n  grid-template-columns: repeat(4, 1fr);\r\n`;\r\n\r\nconst AddAndDelete = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nfunction ShortCut() {\r\n  const [shortCuts, setShortCut] = useRecoilState(shortCutState);\r\n  const onDragEnd = ({ destination, draggableId, source }: DropResult) => {\r\n    if (!destination) return;\r\n    if (destination.droppableId === source.droppableId) {\r\n      let copyShortCut = [...shortCuts[source.droppableId]];\r\n      const link = copyShortCut[source.index].link;\r\n      copyShortCut.splice(source.index, 1);\r\n      copyShortCut.splice(destination.index, 0, { name: draggableId, link });\r\n      setShortCut({\r\n        ...shortCuts,\r\n        [source.droppableId]: copyShortCut,\r\n      });\r\n      localStorage.setItem(\r\n        \"shortCuts\",\r\n        JSON.stringify({\r\n          ...shortCuts,\r\n          [source.droppableId]: copyShortCut,\r\n        })\r\n      );\r\n    }\r\n    if (destination.droppableId === \"delete\") {\r\n      let copyShortCut = [...shortCuts[source.droppableId]];\r\n      copyShortCut.splice(source.index, 1);\r\n      setShortCut({\r\n        ...shortCuts,\r\n        [source.droppableId]: copyShortCut,\r\n      });\r\n      localStorage.setItem(\r\n        \"shortCuts\",\r\n        JSON.stringify({\r\n          ...shortCuts,\r\n          [source.droppableId]: copyShortCut,\r\n        })\r\n      );\r\n    } else if (destination.droppableId !== source.droppableId) {\r\n      let copyDestination = [...shortCuts[destination.droppableId]];\r\n      let copySource = [...shortCuts[source.droppableId]];\r\n      const link = copySource[source.index].link;\r\n      copyDestination.splice(destination.index, 0, { name: draggableId, link });\r\n      copySource.splice(source.index, 1);\r\n      setShortCut({\r\n        ...shortCuts,\r\n        [source.droppableId]: copySource,\r\n        [destination.droppableId]: copyDestination,\r\n      });\r\n      localStorage.setItem(\r\n        \"shortCuts\",\r\n        JSON.stringify({\r\n          ...shortCuts,\r\n          [source.droppableId]: copySource,\r\n          [destination.droppableId]: copyDestination,\r\n        })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Wrapper>\r\n        <Boards>\r\n          {Object.keys(shortCuts).map((boardId) => (\r\n            <Board\r\n              key={boardId}\r\n              boardId={boardId}\r\n              content={shortCuts[boardId]}\r\n            />\r\n          ))}\r\n        </Boards>\r\n      </Wrapper>\r\n      <AddAndDelete>\r\n        <AddDelete />\r\n      </AddAndDelete>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default ShortCut;\r\n","import GoogleForm from \"./components/GoogleForm\";\nimport ShortCut from \"./components/ShortCut\";\n\nfunction App() {\n  return (\n    <>\n      <GoogleForm />\n      <ShortCut />\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    ${reset}\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        padding: 0 40px;\r\n        background-color: #202124;\r\n        color: white;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n    }\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    input{\r\n        border:none;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <GlobalStyle />\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}